Date : 14-Feb-2023

             Assignment-14


1Q.Ans : Program containing a possible exception. Use a try block to throw it and a catch block to handle it promptly :

* Arithmetic Exception : 

public class exception 
{
	public static void main(String[] args)
	{
		try
		{
			int a=1;
			int b=0;
			int c=a/b;
			System.out.println(c);
		}
		catch(ArithmeticException e)
		{
			System.out.println(e);
		}
	}
}

2Q.Ans : Program that illustrates the application of multiple catch statements :

public class exception1 {

	public static void main(String[] args) 
	{
		try
		{
			int a[]=new int[5];
			a[5]=40/0;
			
		}
		catch(ArithmeticException e)
		{
			System.out.println(e);
		}
		catch(ArrayIndexOutOfBoundsException e)
		{
			System.out.println(e);
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
		System.out.println("rest of code");
	}

}

3Q.Ans : Program that demonstrates how certain exception types are not allowed to be thrown : 

public class excep
{
	public static void main(String[] args)
	{
		throw new Error("This is an example of error");
	}
}
This is example of checked Exception and it throwing the exception at a run time.

public class excep{
	public static void main(String[] args)
	{
	throw new RuntimeException("This is an RuntimeException example");
	}
} 

This is example of runtime Exception and it throwing the exception at a run time.

4Q.Ans : Program to demonstrate the concept of re-throwing an exception :

public class rethrow 
{
	public static void test1() throws Exception
	{
    System.out.println("inside test1() method");
	throw new Exception("thrown from test() method");
}
	public static void test2() throws Throwable
	{
	
		try
		{
			test1();
		}
		catch(Exception e)
		{
			System.out.println("inside test2() method");
			throw e;
		}
	}
		public static void main(String[] args) throws Throwable 
		{
		      try 
		      {
		         test2();
		      } 
		      catch(Exception e)
		      {
		         System.out.println("This is static variable");
		      }
			   }
}

5Q.Ans : 

import java.util.Scanner;

public class excep
{
	public static void main(String[] args)
	{
	Scanner sc=new Scanner(System.in);
	{
		try
		{
		
		System.out.println("Enter value of x:");
		int x=sc.nextInt();
		System.out.println("Enter value of y");
		int y=sc.nextInt();
		int sum=x/y;
		System.out.println(sum);
		
	}
		catch(ArithmeticException e)
		{
			System.out.println("Arithmetic Exception");
		}
		catch(Exception e)
		{
			System.out.println("Value is not 32 bit signed integer");
		}
}
}

